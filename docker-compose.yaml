---
# Derived from example provided by Tony Lawrence - see
# http://tonylawrence.com/posts/unix/synology/free-your-synology-ports/
#
# Extended to include multiple services using a separate macvlan
# Macvlan provides unique IP addresses for each container.
#

# ipam configuration options used in the macvlan below
# e.g. aux_addresses are not available in docker-compose
# version 3.x at this time so this compose file needs to use
# the 2.x format.

version: '2.4'

services:
  pihole:     # Pi Hole dns server for local network
    container_name: katschupatscha-Pi-Hole
    image: pihole/pihole:latest
    hostname: pihole
    domainname: lan             # <-- Update
    mac_address: d0:ca:ab:cd:ef:01
    cap_add:
      - NET_ADMIN
    networks:
      macvlan1:
        ipv4_address: 192.168.1.3   # Â <-- Update
    volumes:
      - '/volume1/docker/pihole/config/resolv.conf:/etc/resolv.conf'
      - '/volume1/docker/pihole/dnsmasq.d-configs:/etc/dnsmasq.d/'
      - '/volume1/docker/pihole/data:/etc/pihole/'
    dns:
      - 192.168.5.1
    ports:
      - 443/tcp
      - 53/tcp
      - 53/udp
      - 67/udp
      - 80/tcp
    environment:
      ServerIP: 192.168.1.3           # <-- match ipv4_address
      VIRTUAL_HOST: pihole.lan        # <-- match hostname + domainname
      WEBPASSWORD: "quga5RHDI@"   # <-- Add password
    restart: unless-stopped
  mongo:
    image: mongo:3.6
    container_name: Mongo
    mac_address: d0:ca:ab:cd:ef:ab
    networks:
      macvlan1:
        ipv4_address: 192.168.1.4
    restart: unless-stopped
    volumes:
      - /volume1/docker/mongo/db:/data/db
      - /volume1/docker/mongo/dbcfg:/data/configdb
  unifi:
    image: "jacobalberty/unifi:stable-6"
    container_name: Unifi-Controller
    hostname: unifi2
    domainname: lan
    mac_address: d0:ca:ab:cd:ef:ac
    depends_on:
      - mongo
    init: true
    networks:
      macvlan1:
        ipv4_address: 192.168.1.2
    restart: unless-stopped
    volumes:
      - /volume1/docker/unifi2/data:/unifi/data
      - /volume1/docker/unifi2/log:/unifi/log
      - /volume1/docker/unifi2/cert:/unifi/cert
      - /volume1/docker/unifi2/init.d:/unifi/init.d
      - /volume1/docker/unifi2/run:/var/run/unifi
    environment:
      DB_URI: mongodb://mongo/unifi
      STATDB_URI: mongodb://mongo/unifi_stat
      DB_NAME: unifi
      TZ: Europe/Berlin
      UNIFI_HTTP_PORT: 80
      UNIFI_HTTPS_PORT: 443
      # RUNAS_UID0: false
      # UNIFI_UID: 1029
      # UNIFI_GID: 65537
    ports:
      - "1900/udp"    # L2 discovery
      - "3478/udp"    # STUN
      - "6789/tcp"    # Speed test
      - "80/tcp"      # Device/ controller comm.
      - "443/tcp"     # Controller GUI/API as seen in a web browser
      - "8880/tcp"    # HTTP portal redirection
      - "8843/tcp"    # HTTPS portal redirection
      - "10001/udp"   # AP discovery
      - "27117/tcp"   # DB communications
  logs:
    image: bash
    container_name: Unifi-Logs
    mac_address: d0:ca:ab:cd:ef:ad
    networks:
      macvlan1:
        ipv4_address: 192.168.1.5
    depends_on:
      - unifi
    command: bash -c 'tail -F /unifi/log/*.log'
    restart: always
    volumes:
      - /volume1/docker/unifi2/log:/unifi/log
networks:
  macvlan1:
    driver: macvlan
    driver_opts:
      parent: eth1
    ipam:
      config:
        - subnet: 192.168.1.0/24            # <-- Update
          gateway: 192.168.1.1              # <-- Update
          ip_range: 192.168.1.0/29          # <-- 192.168.1.0 - 1.7
          aux_addresses:
            -host: 192.168.1.9
...
